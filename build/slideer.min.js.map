{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./node_modules/hammerjs/hammer.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","document","exportName","undefined","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","forEach","length","deprecate","method","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","this","arguments","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","constructor","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","sort","results","values","push","b","prefixed","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","x","deltaX","y","deltaY","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","direction","last","lastInterval","v","computeIntervalInputData","srcEvent","computeInputData","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","isSyntheticEvent","dx","dy","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","set","compute","actions","update","touchAction","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","handlers","oldCssProps","toggleCssProps","item","add","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","triggerDomEvent","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","Slideer","el","opt","error","animating","startIndex","loop","delta","hammer","onSwipe","next","checkLoop","current","previous","check","getEvent","getNext"],"mappings":"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","file":"slideer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","import Hammer from 'hammerjs'\n\nexport default class Slideer {\n    \n    constructor(el, opt = {}) {\n\n        if(!el)\n            console.error('You need to provide an element in costructor')\n\n        if(!opt.callback)\n            console.error('You need to provide a callback function in the options')\n        \n        this.el = el\n        this.animating = false\n        \n        this.index = opt.startIndex ? opt.startIndex : 0\n        this.length = opt.length - 1\n\n        this.options = {\n            loop: opt.loop || false,\n            callback: opt.callback,\n            delta: opt.delta || 1\n        }\n\n        this.hammer = null\n\n        this.onSwipe = this.onSwipe.bind(this)\n    }\n    \n    init() {\n\n        this.hammer = new Hammer.Manager(this.el)\n        this.hammer.add(new Hammer.Swipe({\n            direction: Hammer.DIRECTION_HORIZONTAL\n        }))\n        this.hammer.on('swipe', this.onSwipe)\n    }\n    \n    destroy() {\n    \n        this.hammer.off('swipe', this.onSwipe)\n        this.hammer.destroy()\n        this.hammer = null\n    }\n\n    getNext(delta) {\n        \n        const next = delta >= this.options.delta ? this.index - 1 : this.index + 1 \n        \n        return this.checkLoop(next)\n    }\n\n    checkLoop(next) {\n\n        return next < 0 ? this.options.loop ? this.length : 0 : next > this.length ? this.options.loop ? 0 : this.length : next\n    }\n\n    getEvent(index) {\n\n        return {\n            current: index,\n            previous: this.index,\n            direction: index >= this.index ? 1 : -1\n        }\n    }\n    \n    getCurrentSlide() {\n        \n        return this.index\n    }\n\n    onSwipe(e) {\n\n        const delta = e.deltaX\n\n        if(this.animating || delta > -this.options.delta && delta < this.options.delta) return\n        this.animating = true\n        \n        this.callback(delta)\n    }\n    \n    goTo(index) {\n\n        const check = this.checkLoop(index)\n        const event = this.getEvent(check)\n\n        if(this.animating) return\n        this.animating = true\n\n        this.index = check\n        this.options.callback(event)\n    }\n\n    callback(delta) {\n        \n        const index = this.getNext(delta)\n        const event = this.getEvent(index)\n        \n        this.index = index\n        this.options.callback(event)\n    }\n}"],"sourceRoot":""}